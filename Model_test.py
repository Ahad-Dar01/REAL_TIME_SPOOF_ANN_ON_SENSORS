import tensorflow as tf
import pandas as pd
import time
import threading
import Utility as ul
from main import SO
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
data=pd.read_csv('FINALE_28.csv')
model=tf.keras.models.load_model("SENSOR_ANN.h5")
X = data.iloc[:,1:-1].values
b=sc.fit(X)

#test
while(1): 
    sensor1x=[]
    sensor1y=[]
    for i in range(202):
        #print(SO.read_thread(1)['s11'])
        #SO.read_thread(1)['s11']
        sensor1x.append(SO.read_thread(1)['s11'])
        sensor1y.append(SO.read_thread(1)['s12'])
        time.sleep(1)
        #print(sensor1x)
    #sensor1x.append(test)
    #sensor1y.append(test)
    #print(sensor1x)
    sensor11=[]
    sensor12=[]
    sensor11,sensor12=ul.statistical(sensor1x,sensor1y)
    for i in sensor12:
        sensor2=i
    for i in sensor11:
        sensor1=i
    #print(sensor11)
    Burhan=[sensor1, sensor2]
    #,SO.read_thread(1)['s21'],SO.read_thread(1)['s22']]
    a=sc.transform([Burhan])
    prediction=model.predict(a)
    print (prediction)
    #if(prediction>0.0)
    #SO.write_thread(int(prediction*100))
